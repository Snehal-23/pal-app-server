{"ast":null,"code":"var mongoose = require(\"mongoose\");\n\nvar Schema = mongoose.Schema;\nvar userSchema = new Schema({\n  username: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  fname: {\n    type: String,\n    required: true\n  },\n  lname: {\n    type: String,\n    required: true\n  },\n  email: {\n    type: String,\n    required: true,\n    unique: true\n  },\n  passwordHash: {\n    type: String,\n    required: true\n  },\n  street: {\n    type: String,\n    required: true\n  },\n  apartment: {\n    type: String,\n    required: true\n  },\n  city: {\n    type: String,\n    required: true\n  },\n  zip: {\n    type: Number,\n    required: true\n  },\n  state: {\n    type: String,\n    required: true\n  },\n  country: {\n    type: String,\n    required: true\n  },\n  phone: {\n    type: Number,\n    required: true,\n    unique: true\n  },\n  isAdmin: {\n    type: Boolean,\n    required: true\n  }\n}, {\n  timestamps: true\n});\nuserSchema.virtual(\"id\").get(function () {\n  return this._id.toHexString();\n});\nuserSchema.set(\"toJSON\", {\n  virtuals: true\n});\nmodule.exports = mongoose.model(\"User\", userSchema);","map":{"version":3,"names":["mongoose","require","Schema","userSchema","username","type","String","required","unique","fname","lname","email","passwordHash","street","apartment","city","zip","Number","state","country","phone","isAdmin","Boolean","timestamps","virtual","get","_id","toHexString","set","virtuals","module","exports","model"],"sources":["C:/Users/snehal/eduvanz/pal/models/user.js"],"sourcesContent":["const mongoose = require(\"mongoose\");\r\n\r\nconst Schema = mongoose.Schema;\r\n\r\nconst userSchema = new Schema(\r\n  {\r\n    username: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    fname: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    lname: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    passwordHash: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    street: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    apartment: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    city: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    zip: {\r\n      type: Number,\r\n      required: true,\r\n    },\r\n    state: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    country: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    phone: {\r\n      type: Number,\r\n      required: true,\r\n      unique: true,\r\n    },\r\n    isAdmin: {\r\n      type: Boolean,\r\n      required: true,\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\nuserSchema.virtual(\"id\").get(function () {\r\n  return this._id.toHexString();\r\n});\r\n\r\nuserSchema.set(\"toJSON\", {\r\n  virtuals: true,\r\n});\r\nmodule.exports = mongoose.model(\"User\", userSchema);\r\n"],"mappings":"AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,UAAD,CAAxB;;AAEA,IAAMC,MAAM,GAAGF,QAAQ,CAACE,MAAxB;AAEA,IAAMC,UAAU,GAAG,IAAID,MAAJ,CACjB;EACEE,QAAQ,EAAE;IACRC,IAAI,EAAEC,MADE;IAERC,QAAQ,EAAE,IAFF;IAGRC,MAAM,EAAE;EAHA,CADZ;EAMEC,KAAK,EAAE;IACLJ,IAAI,EAAEC,MADD;IAELC,QAAQ,EAAE;EAFL,CANT;EAUEG,KAAK,EAAE;IACLL,IAAI,EAAEC,MADD;IAELC,QAAQ,EAAE;EAFL,CAVT;EAcEI,KAAK,EAAE;IACLN,IAAI,EAAEC,MADD;IAELC,QAAQ,EAAE,IAFL;IAGLC,MAAM,EAAE;EAHH,CAdT;EAmBEI,YAAY,EAAE;IACZP,IAAI,EAAEC,MADM;IAEZC,QAAQ,EAAE;EAFE,CAnBhB;EAuBEM,MAAM,EAAE;IACNR,IAAI,EAAEC,MADA;IAENC,QAAQ,EAAE;EAFJ,CAvBV;EA2BEO,SAAS,EAAE;IACTT,IAAI,EAAEC,MADG;IAETC,QAAQ,EAAE;EAFD,CA3Bb;EA+BEQ,IAAI,EAAE;IACJV,IAAI,EAAEC,MADF;IAEJC,QAAQ,EAAE;EAFN,CA/BR;EAmCES,GAAG,EAAE;IACHX,IAAI,EAAEY,MADH;IAEHV,QAAQ,EAAE;EAFP,CAnCP;EAuCEW,KAAK,EAAE;IACLb,IAAI,EAAEC,MADD;IAELC,QAAQ,EAAE;EAFL,CAvCT;EA2CEY,OAAO,EAAE;IACPd,IAAI,EAAEC,MADC;IAEPC,QAAQ,EAAE;EAFH,CA3CX;EA+CEa,KAAK,EAAE;IACLf,IAAI,EAAEY,MADD;IAELV,QAAQ,EAAE,IAFL;IAGLC,MAAM,EAAE;EAHH,CA/CT;EAoDEa,OAAO,EAAE;IACPhB,IAAI,EAAEiB,OADC;IAEPf,QAAQ,EAAE;EAFH;AApDX,CADiB,EA0DjB;EACEgB,UAAU,EAAE;AADd,CA1DiB,CAAnB;AA+DApB,UAAU,CAACqB,OAAX,CAAmB,IAAnB,EAAyBC,GAAzB,CAA6B,YAAY;EACvC,OAAO,KAAKC,GAAL,CAASC,WAAT,EAAP;AACD,CAFD;AAIAxB,UAAU,CAACyB,GAAX,CAAe,QAAf,EAAyB;EACvBC,QAAQ,EAAE;AADa,CAAzB;AAGAC,MAAM,CAACC,OAAP,GAAiB/B,QAAQ,CAACgC,KAAT,CAAe,MAAf,EAAuB7B,UAAvB,CAAjB"},"metadata":{},"sourceType":"script"}